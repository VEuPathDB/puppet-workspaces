import jenkins.model.*
import hudson.model.*
import hudson.slaves.*
import hudson.plugins.sshslaves.*
import java.util.ArrayList;
import hudson.slaves.EnvironmentVariablesNodeProperty.Entry;
import hudson.plugins.sshslaves.verifiers.NonVerifyingKeyVerificationStrategy;

import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey
import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource
import com.cloudbees.plugins.credentials.CredentialsScope
import com.cloudbees.plugins.credentials.CredentialsProvider
import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials
import com.cloudbees.plugins.credentials.impl.*;
import com.cloudbees.plugins.credentials.*;
import com.cloudbees.plugins.credentials.domains.*;

def config = new ConfigSlurper().parse(new File('<%= @dslconfig -%>').toURL())

def username="joeuser"
def keypath="/usr/local/home/jenkins/.ssh/id_rsa"

def creds = CredentialsProvider.lookupCredentials(StandardUsernameCredentials.class, Jenkins.instance)
def c = creds.findResult { it.username == username ? it : null }

// only create creds if they don't exist yet
if (!c) {
    println "${username} not found, creating"
    ks = new BasicSSHUserPrivateKey(
          CredentialsScope.SYSTEM,
          null,
          username,
          new FileOnMasterPrivateKeySource(keypath),
          "",
          ""
        )
    SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), ks)

    creds = CredentialsProvider.lookupCredentials(StandardUsernameCredentials.class, Jenkins.instance)
    c = creds.findResult { it.username == username ? it : null }
    println "${c.username} created with id ${c.id}"

} else {
    println "${c.username} found with id ${c.id}"
}




//  List<Entry> env = new ArrayList<Entry>();
//  env.add(new Entry("key1","value1"))
//  env.add(new Entry("key2","value2"))
//  EnvironmentVariablesNodeProperty envPro = new EnvironmentVariablesNodeProperty(env);
for (n in config.nodeList ) {
  Slave slave = new DumbSlave(
                    n.name,                    // name
                    "Irods node",              // nodeDescription
                    "/var/tmp/",               // remoteFS
                    "14",                      // numExecutors
                    Node.Mode.NORMAL,          // mode "Usage" field, EXCLUSIVE is "only tied to node", NORMAL is "any"
                    n.label,                   // labelString
                    new SSHLauncher(n.host,        // host
                        22,                        // port
                        c,                         // creds (from above)
                        "",                        // jvmOptions
                        "",                        // javaPath
                        null,                      // JDKInstaller
                        "",                        // prefixStartSlaveCmd
                        "",                        // suffixStartSlaveCmd
                        100,                       // launchTimeoutSeconds
                        3,                         // maxNumRetries
                        3,                         // retryWaitTime
                        new NonVerifyingKeyVerificationStrategy()),  //  verification strategy
                    new RetentionStrategy.Always(), // retentionStrategy
                    new LinkedList())          // nodeProperties
//  slave.getNodeProperties().add(envPro)
  Jenkins.instance.addNode(slave)
  }

