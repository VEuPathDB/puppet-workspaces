def config = new ConfigSlurper().parse(new File('<%= @dslconfig -%>').toURL())

def handlerJobDesc = { project ->
  return """
    handler job for ${project} 
  """.stripIndent()
}

def handlerStep = { project ->
  return """
    export BASE_GUS="\$WORKSPACE"
    export GUS_HOME="\$BASE_GUS/gus_home"
    export PROJECT_HOME="\$BASE_GUS/project_home"
    export PATH="\$GUS_HOME/bin:\$PROJECT_HOME/install/bin:\$PATH"
    export PERL5LIB="\$GUS_HOME/lib/perl"
    export PROJECT_ID="${project}"
    export PROJECT=\$PROJECT_ID
    export PROJECT_LIST="\$PROJECT_HOME/EuPathDBIrods/projectconf/${config.confset}"

    PROJECT_DB="\$(grep \$PROJECT \$PROJECT_LIST | cut -f 2)"
    PROJECT_LOC="\$(grep \$PROJECT \$PROJECT_LIST | cut -f 3)"
    echo PROJECT_DB=\$PROJECT_DB
    echo PROJECT_LOC=\$PROJECT_LOC

    # see if this project is configured correctly or at all, bail if it isn't
    test "\$PROJECT_DB" == "" && exit
    test "\$PROJECT_LOC" == "" && exit

    # if project location is not both, and we aren't local, 
    # just bail without configuring that project.
    if [[ "\$PROJECT_LOC" == "north" && "\$label" == "irods-south" ]]
      then
        echo "project is \$PROJECT_LOC and I'm \$label. giving up"
        exit
    fi
    
    if [[ "\$PROJECT_LOC" == "south" && "\$label" == "irods-north" ]]
      then
        echo "project is \$PROJECT_LOC and I'm \$label. giving up"
        exit
    fi

    # remove obsolete ojdbc5.jar
    rm \$GUS_HOME/lib/java/db_driver/ojdbc5.jar || true


    fgpJava org.apidb.irods.ProcessIrodsEvents
  """.stripIndent()
}

def listenerStep = {
  return """
    jenkins.model.Jenkins.instance.items.each {
      if (it.name ==~ /^irods-handler-.*/) {
        println "Starting " + it.name
		def build = Thread.currentThread().executable
		def resolver = build.buildVariableResolver

		def ds_id = "DATASET_STORE_ID"
		def ds_value = resolver.resolve(ds_id)
		def ds_param = new hudson.model.StringParameterValue(ds_id, ds_value)

		def rm = "RUN_MODE"
		def rm_value = resolver.resolve(rm)
		def rm_param = new hudson.model.StringParameterValue(rm, rm_value)

		def paramAction = new hudson.model.ParametersAction([ds_param, rm_param])

        hudson.model.Hudson.instance.queue.schedule(it, 0, paramAction)
      }
    }
  """.stripIndent()
}

def builderPreScmStep = {
    return """
    # Setup env variables for this build step
    export BASE_GUS="\$WORKSPACE"
    
    # Unless this build is run in development mode, completely remove
    # everything in this workspace.  Then add back projectList.txt
     if [[ "\$MODE" != "Dev" ]]
      then
        rm -rf \$BASE_GUS/*
    fi
    """.stripIndent()
}

def builderPostScmStep = {
  return """


# Setup env variables for this build step
export BASE_GUS="\$WORKSPACE"
export GUS_HOME="\$BASE_GUS/gus_home"
export PROJECT_HOME="\$BASE_GUS/project_home"
export PATH="\$GUS_HOME/bin:\$PROJECT_HOME/install/bin:\$PATH"
export PERL5LIB="\$GUS_HOME/lib/perl"
export SITE_VARS="\$GUS_HOME/config/site-vars.yml"

export PROJECT_LIST="\$PROJECT_HOME/EuPathDBIrods/projectconf/${config.confset}"
export CONFIGURED_PROJECTS=0

case "\$ENV" in
    savm)
        PREFIX=""
        ;;
    prod)
        PREFIX="w"
        ;;
    qa)
        PREFIX="q"
        ;;
esac

#create empty site-vars.yml - all conifer config should be in env config
mkdir -p \$GUS_HOME/config
touch \$SITE_VARS

# do initial conifer install
\$BASE_GUS/project_home/conifer/bin/conifer install EuPathDBIrods

# configure each project listed in PROJECT_LSIT
PROJECTS="\$(grep -v ^project \$PROJECT_LIST | cut -f 1)"
echo projects are: \$PROJECTS

for PROJECT in \$PROJECTS
do


PROJECT_DB="\$(grep \$PROJECT \$PROJECT_LIST | cut -f 2)"
PROJECT_LOC="\$(grep \$PROJECT \$PROJECT_LIST | cut -f 3)"
echo PROJECT_DB=\$PROJECT_DB
echo PROJECT_LOC=\$PROJECT_LOC

if [[ "\$label" == "irods-south" ]]
  then
    WEBSITE_PREFIX=\${PREFIX}1
fi

if [[ "\$label" == "irods-north" ]]
  then
    WEBSITE_PREFIX=\${PREFIX}2
fi

# if project location is not both, and we aren't local, 
# just bail without configuring that project.
if [[ "\$PROJECT_LOC" == "north" && "\$label" == "irods-south" ]]
  then
    echo "project is \$PROJECT_LOC and I'm \$label. giving up"
    continue
fi

if [[ "\$PROJECT_LOC" == "south" && "\$label" == "irods-north" ]]
  then
    echo "project is \$PROJECT_LOC and I'm \$label. giving up"
    continue
fi


# if project db is auto, do lookup to website to determine db in use.
if [[ "\$PROJECT_DB" == "auto" ]]
  then

    if [[ "\$PROJECT" == "SchistoDB" ]]
    then
      PROJECT_DOMAIN="\$PROJECT.net"
    else
      PROJECT_DOMAIN="\$PROJECT.org"
    fi
    
    DB_URL="https://\$WEBSITE_PREFIX.\$PROJECT_DOMAIN/dashboard/xml/wdk/databases/appdb/dbuniquename/value"
    echo "I'd hit \$DB_URL"
    CURL_OUT=\$(curl -f \$DB_URL)
    
    # basic sanity check
    if [ \${#CURL_OUT} -gt 10 ]
      then
        # bail - maybe more forcefully?
        continue
    fi
    PROJECT_DB=\$CURL_OUT
fi


# set appdb connection via extra vars to conifer
  export EXTRA_CONIFER_ARGS=" --extra-vars modelconfig_appDb_connectionUrl=jdbc:oracle:oci:@\$PROJECT_DB --extra-vars modelconfig_adminEmail=${config.modelconfig_adminEmail}"

  echo project is: \$PROJECT
  \$BASE_GUS/project_home/conifer/bin/conifer configure \\
  --project \$PROJECT \\
  --env \$ENV \\
  --site-vars \$SITE_VARS \\
  EuPathDBIrods \\
  \$EXTRA_CONIFER_ARGS

  CONFIGURED_PROJECTS=\$[\$CONFIGURED_PROJECTS+1]

done

# only build if we have configured at least one project
if [ "\$CONFIGURED_PROJECTS" -gt 0 ]
then
  if [[ "\$DO_BUILD" == "true" ]]
  then
    # Contains all the project dependencies
    bld EuPathDBIrods
  else
    echo "skipping build"
  fi
fi

  """.stripIndent()
}

matrixJob('irods-builder') {
  axes {
    label('label', *config.labelNodes)
  }
  description('')
  blockOn('^' + config.handlerJobPrefix + '.*'){
    blockLevel('GLOBAL')
  }

  customWorkspace(config.workspace)
  //childCustomWorkspace('.')
  concurrentBuild(true)
  parameters {
    stringParam('MODE', 'Dev', 'Indicates whether the mode of operation is development (DEV) or other.  If not development, a complete cleaning is done.')
    stringParam('ENV', config.environment, 'The environment to run in, (savm, prod, qa)')
    booleanParam('DO_BUILD', true, 'If true, perform build.  If false, config only')
  }
  scm {
    svn {
      location("https://github.com/VEuPathDB/install/${config.branch}@HEAD") {
        directory('project_home/install')
      }
      location("https://github.com/VEuPathDB/WSF/${config.branch}@HEAD") {
        directory('project_home/WSF')
      }
      location("https://github.com/VEuPathDB/TuningManager/${config.branch}@HEAD") {
        directory('project_home/TuningManager')
      }
      location("https://github.com/VEuPathDB/WDK/${config.branch}@HEAD") {
        directory('project_home/WDK')
      }
      location("https://github.com/VEuPathDB/GusAppFramework/${config.branch}@HEAD") {
        directory('project_home/GUS')
      }
      location("https://github.com/VEuPathDB/CBIL/${config.branch}@HEAD") {
        directory('project_home/CBIL')
      }
      location("https://github.com/VEuPathDB/ReFlow/${config.branch}@HEAD") {
        directory('project_home/ReFlow')
      }
      location("https://github.com/VEuPathDB/GusSchema/${config.branch}@HEAD") {
        directory('project_home/GusSchema')
      }
      location("https://github.com/VEuPathDB/FgpUtil/${config.branch}@HEAD") {
        directory('project_home/FgpUtil')
      }
      location("https://github.com/VEuPathDB/ApiCommonData/${config.branch}@HEAD") {
        directory('project_home/ApiCommonData')
      }
      location("https://github.com/VEuPathDB/EbrcWebsiteCommon/${config.branch}@HEAD") {
        directory('project_home/EbrcWebsiteCommon')
      }
      location("https://github.com/VEuPathDB/DoTS/${config.branch}@HEAD") {
        directory('project_home/DoTS')
      }
      location("https://github.com/VEuPathDB/ApiCommonWebService/${config.branch}@HEAD") {
        directory('project_home/ApiCommonWebService')
      }
      location("https://github.com/VEuPathDB/ApiCommonWebsite/${config.branch}@HEAD") {
        directory('project_home/ApiCommonWebsite')
      }
      location("https://github.com/VEuPathDB/WDKClient/${config.branch}@HEAD") {
        directory('project_home/WDKClient')
      }
      location("https://github.com/VEuPathDB/EbrcWebSvcCommon/${config.branch}@HEAD") {
        directory('project_home/EbrcWebSvcCommon')
      }
      location("https://github.com/VEuPathDB/ApiCommonModel/${config.branch}@HEAD") {
        directory('project_home/ApiCommonModel')
      }
      location("https://github.com/VEuPathDB/EbrcModelCommon/${config.branch}@HEAD") {
        directory('project_home/EbrcModelCommon')
      }
      location("https://github.com/VEuPathDB/EuPathDBIrods/${config.branch}@HEAD") {
        directory('project_home/EuPathDBIrods')
      }
      location("https://github.com/VEuPathDB/WDKClient/${config.branch}@HEAD") {
        directory('project_home/WDKClient')
      }
      location("https://github.com/VEuPathDB/Conifer/${config.branch}@HEAD") {
        directory('project_home/conifer')
      }
    }
  }
  if (config.svn_build_poll) {
    triggers {
      scm('H H * * *')
    }
  }
  wrappers {
    credentialsBinding {
      usernamePassword('GITHUB_USER', 'GITHUB_TOKEN', 'config.buildCredentialId')
    }
    preScmSteps {
      steps {
        shell(builderPreScmStep())
      }
      failOnError()
    }
  }
  steps {
    shell(builderPostScmStep())
  }
  publishers {
	extendedEmail {
	  recipientList(config.emailRecipient)
	  defaultSubject('Jenkins Message for the iRODS builder')
      defaultContent('EOM')
	  replyToList(config.sender)
	  triggers {
	    failure {
	      subject('Jenkins Failure for the iRODS builder')
	      content('Builder Failed')
		  attachBuildLog(true)
		  replyToList(config.sender)
		  recipientList(config.emailRecipient)
	    }
	  }
	}
  }
}

job('irods-listener') {
  description('Trigger all irods-handler-.* jobs')
  parameters {
	stringParam(config.datasetStoreId, '', 'This is essentially the signature of the dataset store calling this listener.')
        stringParam('RUN_MODE', 'sync', 'Run mode can be one of "sync" or "cleanup" defaults to "sync"')
  }
  steps {
    systemGroovyCommand(listenerStep())
  }
  publishers {
	extendedEmail {
	  recipientList(config.emailRecipient)
	  defaultSubject('Jenkins Message for the iRODS listener')
      defaultContent('EOM')
	  replyToList(config.sender)
	  triggers {
	    failure {
	      subject('Jenkins Failure for the iRODS listener')
	      content('Listener failed')
		  attachBuildLog(true)
		  replyToList(config.sender)
		  recipientList(config.emailRecipient)
	    }
	  }
	}
  }
}

def cleanallStep = {
  return """
    jenkins.model.Jenkins.instance.items.each {
    if (it.name ==~ /^/ + "${config.cleanerJobPrefix}" + /.*/) {
        println "Starting " + it.name
		def build = Thread.currentThread().executable
		def key = "DRY_RUN"
		def resolver = build.buildVariableResolver
		def value = resolver.resolve(key)
		def param = new hudson.model.StringParameterValue(key, value)
	    def paramAction = new hudson.model.ParametersAction(param)
       hudson.model.Hudson.instance.queue.schedule(it, 0, paramAction)
      }
    }
  """.stripIndent()
}

job(config.cleanerJob) {
description("run all ${config.cleanerJobPrefix} jobs")
        parameters {
          booleanParam('DRY_RUN', true, 'If true, just print what we would do, don\'t do anything ')
        }
  steps {
    systemGroovyCommand(cleanallStep())
  }
}

def cleanerStep = { project ->
  return """

export BASE_GUS="\$WORKSPACE"
export GUS_HOME="\$BASE_GUS/gus_home"
export PROJECT_HOME="\$BASE_GUS/project_home"
export PATH="\$GUS_HOME/bin:\$PROJECT_HOME/install/bin:\$PATH"
export PROJECT_ID="${project}"
export PROJECT=\$PROJECT_ID
export PROJECT_LIST="\$PROJECT_HOME/EuPathDBIrods/projectconf/${config.confset}"

export GUS_CONFIG=\$GUS_HOME/config/\$PROJECT/gus.config

export PROJECT_DB=\$(awk -F@ '/^jdbc/{print \$2}' \$GUS_CONFIG)
export DB_USER=\$(awk -F= '/databaseLogin/{print \$2}' \$GUS_CONFIG)

  if [[ "\$DRY_RUN" == "true" ]]
  then
    echo "I would take info out of \$GUS_CONFIG and run \$PROJECT_HOME/ApiCommonData/Load/lib/sql/apidbschema/truncate* against \$PROJECT_DB as user \$DB_USER"
    ls -al \$PROJECT_HOME/ApiCommonData/Load/lib/sql/apidbschema/truncate*
  else
    # we pull out the password this way so that we don't expose it to process listing.  
    # Database password is pulled out the same way in a subshell
    # we run truncate core tables first, then dataset type tables

    awk -F= '/databasePassword/{print \$2}' \$GUS_CONFIG \
    | sqlplus  \$DB_USER@\$PROJECT_DB @\$PROJECT_HOME/ApiCommonData/Load/lib/sql/apidbschema/truncateUserDatasetTypeTables.sql
    awk -F= '/databasePassword/{print \$2}' \$GUS_CONFIG \
    | sqlplus  \$DB_USER@\$PROJECT_DB @\$PROJECT_HOME/ApiCommonData/Load/lib/sql/apidbschema/truncateUserDatasetCoreTables.sql
  fi

  """.stripIndent()
}

for(project in config.projects) {
    jobName = 'cleaner-' + project
    matrixJob(jobName) {
        axes {
            label('label', *config.labelNodes)
        }
        description('cleaner job for ' + project)
        parameters {
          booleanParam('DRY_RUN', true, 'If true, just print what we would do, don\'t do anything ')
        }
        blockOn('^' + config.handlerJobPrefix + project){
          blockLevel('GLOBAL')
        }
        //label(node)
        customWorkspace(config.workspace)
        //childCustomWorkspace('.')
        steps {
          shell(cleanerStep(project))
        }
    }

}


for(project in config.projects) {
    jobName = config.handlerJobPrefix + project
    matrixJob(jobName) {
        axes {
            label('label', *config.labelNodes)
        }
        description(handlerJobDesc(project))
        parameters {
         stringParam(config.datasetStoreId, '', 'This is essentially the signature of the dataset store calling this handler\'s listener.')
         stringParam('RUN_MODE', 'sync', 'Run mode can be one of "sync" or "cleanup" defaults to "sync"')
        }
        blockOn([config.builderJob, '^' + config.cleanerJobPrefix + project]){
          blockLevel('GLOBAL')
        }
        //label(node)
        customWorkspace(config.workspace)
        //childCustomWorkspace('.')
    	authenticationToken(config.remoteJobToken)
        steps {
          shell(handlerStep(project))
        }
	publishers {

        // keep jobs for 30 days, or 9000 jobs
        logRotator(30, 9000, -1, -1)

// Note: would be nice to use the dsl below, but there is no runForMatrixParent
// option in dsl currently, so we just do it manually with a configure block.
//          groovyPostBuild('if (manager.build.result.isWorseThan(hudson.model.Result.SUCCESS)) { manager.build.project.disabled = true }', Behavior.DoNothing)

          configure { it / 'publishers' / 'org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder' {
              runForMatrixParent true
              behavior 0
              script {
                script """if (manager.build.result.isWorseThan(hudson.model.Result.SUCCESS)) { 
manager.build.project.disabled = true }

// The below is only useful if we have temporarily disabled one campus.
// Otherwise, a failure of one side will be masked. TODO: fix this to be a
// better method
//
if(manager.logContains(".*completed with result SUCCESS.*")) {
   manager.build.project.disabled = false
}

"""
                sandbox false
              }
            }
          }
	}
    }
}
